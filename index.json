[{"uri":"https://maxime-cls.github.io/elastic-tutorial/elastic/prerequis/installation/","title":"Installation","tags":[],"description":"","content":"Prérequis  Ubuntu ou Debian Docker Exécuter la commande ci-dessous  sudo sysctl -w vm.max_map_count=262144\rExécution dans Docker avec TLS activé Si les fonctions de sécurité sont activées, vous devez configurer le chiffrement TLS (Transport Layer Security) pour la couche de transport d\u0026rsquo;Elasticsearch. Bien qu\u0026rsquo;il soit possible d\u0026rsquo;utiliser une licence d\u0026rsquo;essai sans configurer TLS, nous vous conseillons de sécuriser votre pile dès le départ.\nPour obtenir un cluster Elasticsearch et Kibana opérationnel dans Docker avec la sécurité activée, vous pouvez utiliser Docker Compose :\nCréez les fichiers de composition et de configuration suivants. Ces fichiers sont également disponibles dans le dépôt elastic/stack-docs sur GitHub.\ninstances.yml identifie les instances pour lesquelles vous devez créer des certificats. .env définit des variables d\u0026rsquo;environnement pour spécifier la version d\u0026rsquo;Elasticsearch et l\u0026rsquo;emplacement où les certificats Elasticsearch seront créés. create-certs.yml est un fichier Docker Compose qui lance un conteneur pour générer les certificats pour Elasticsearch et Kibana. elastic-docker-tls.yml est un fichier Docker Compose qui met en place un cluster Elasticsearch à trois nœuds et une instance Kibana avec TLS activé afin que vous puissiez voir comment les choses fonctionnent. Cette configuration tout-en-un est un moyen pratique de mettre en place votre premier cluster de développement avant de construire un déploiement distribué avec plusieurs hôtes.\ninstances.yml :\ninstances:\r- name: es01\rdns:\r- es01\r- localhost\rip:\r- 127.0.0.1\r- name: es02\rdns:\r- es02\r- localhost\rip:\r- 127.0.0.1\r- name: es03\rdns:\r- es03\r- localhost\rip:\r- 127.0.0.1\r- name: 'kib01'\rdns:\r- kib01\r- localhost\r- name: 'package-registry'\rdns:\r- package-registry\r- localhost\r- name: 'fleet-server'\rdns:\r- fleet-server\r- localhost\r.env:\nCOMPOSE_PROJECT_NAME=es\rCERTS_DIR=/usr/share/elasticsearch/config/certificates\rVERSION=7.17.0\rcreate-certs.yml:\rversion: '2.2'\rservices:\rcreate_certs:\rimage: docker.elastic.co/elasticsearch/elasticsearch:${VERSION}\rcontainer_name: create_certs\rcommand: \u0026gt;\rbash -c '\ryum install -y -q -e 0 unzip;\rif [[ ! -f /certs/bundle.zip ]]; then\rbin/elasticsearch-certutil cert --silent --pem --in config/certificates/instances.yml -out /certs/bundle.zip;\runzip /certs/bundle.zip -d /certs;\rfi;\rchown -R 1000:0 /certs\r'\rworking_dir: /usr/share/elasticsearch\rvolumes:\r- certs:/certs\r- .:/usr/share/elasticsearch/config/certificates\rnetworks:\r- elastic\rvolumes:\rcerts:\rdriver: local\rnetworks:\relastic:\rdriver: bridge\relastic-docker-tls.yml:\nversion: '2.2'\rservices:\res01:\rimage: docker.elastic.co/elasticsearch/elasticsearch:${VERSION}\rcontainer_name: es01\renvironment:\r- node.name=es01\r- cluster.name=es-docker-cluster\r- discovery.seed_hosts=es02,es03\r- cluster.initial_master_nodes=es01,es02,es03\r- bootstrap.memory_lock=true\r- \u0026quot;ES_JAVA_OPTS=-Xms512m -Xmx512m\u0026quot;\r- xpack.license.self_generated.type=trial\r- xpack.security.enabled=true\r- xpack.security.http.ssl.enabled=true\r- xpack.security.http.ssl.key=$CERTS_DIR/es01/es01.key\r- xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt\r- xpack.security.http.ssl.certificate=$CERTS_DIR/es01/es01.crt\r- xpack.security.transport.ssl.enabled=true\r- xpack.security.transport.ssl.verification_mode=certificate\r- xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt\r- xpack.security.transport.ssl.certificate=$CERTS_DIR/es01/es01.crt\r- xpack.security.transport.ssl.key=$CERTS_DIR/es01/es01.key\r- xpack.security.authc.api_key.enabled=true\rulimits:\rmemlock:\rsoft: -1\rhard: -1\rvolumes:\r- data01:/usr/share/elasticsearch/data\r- certs:$CERTS_DIR\rports:\r- 9200:9200\rnetworks:\r- elastic\rhealthcheck:\rtest: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 \u0026gt;/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi\rinterval: 30s\rtimeout: 10s\rretries: 5\res02:\rimage: docker.elastic.co/elasticsearch/elasticsearch:${VERSION}\rcontainer_name: es02\renvironment:\r- node.name=es02\r- cluster.name=es-docker-cluster\r- discovery.seed_hosts=es01,es03\r- cluster.initial_master_nodes=es01,es02,es03\r- bootstrap.memory_lock=true\r- \u0026quot;ES_JAVA_OPTS=-Xms512m -Xmx512m\u0026quot;\r- xpack.license.self_generated.type=trial\r- xpack.security.enabled=true\r- xpack.security.http.ssl.enabled=true\r- xpack.security.http.ssl.key=$CERTS_DIR/es02/es02.key\r- xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt\r- xpack.security.http.ssl.certificate=$CERTS_DIR/es02/es02.crt\r- xpack.security.transport.ssl.enabled=true\r- xpack.security.transport.ssl.verification_mode=certificate\r- xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt\r- xpack.security.transport.ssl.certificate=$CERTS_DIR/es02/es02.crt\r- xpack.security.transport.ssl.key=$CERTS_DIR/es02/es02.key\r- xpack.security.authc.api_key.enabled=true\rulimits:\rmemlock:\rsoft: -1\rhard: -1\rvolumes:\r- data02:/usr/share/elasticsearch/data\r- certs:$CERTS_DIR\rnetworks:\r- elastic\res03:\rimage: docker.elastic.co/elasticsearch/elasticsearch:${VERSION}\rcontainer_name: es03\renvironment:\r- node.name=es03\r- cluster.name=es-docker-cluster\r- discovery.seed_hosts=es01,es02\r- cluster.initial_master_nodes=es01,es02,es03\r- bootstrap.memory_lock=true\r- \u0026quot;ES_JAVA_OPTS=-Xms512m -Xmx512m\u0026quot;\r- xpack.license.self_generated.type=trial\r- xpack.security.enabled=true\r- xpack.security.http.ssl.enabled=true\r- xpack.security.http.ssl.key=$CERTS_DIR/es03/es03.key\r- xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt\r- xpack.security.http.ssl.certificate=$CERTS_DIR/es03/es03.crt\r- xpack.security.transport.ssl.enabled=true\r- xpack.security.transport.ssl.verification_mode=certificate\r- xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt\r- xpack.security.transport.ssl.certificate=$CERTS_DIR/es03/es03.crt\r- xpack.security.transport.ssl.key=$CERTS_DIR/es03/es03.key\rulimits:\rmemlock:\rsoft: -1\rhard: -1\rvolumes:\r- data03:/usr/share/elasticsearch/data\r- certs:$CERTS_DIR\rnetworks:\r- elastic\rkib01:\rimage: docker.elastic.co/kibana/kibana:${VERSION}\rcontainer_name: kib01\rdepends_on:\res01: { condition: service_healthy}\rpackage-registry: { condition: service_healthy }\rports:\r- 5601:5601\renvironment:\rSERVERNAME: localhost\rELASTICSEARCH_URL: https://es01:9200\rELASTICSEARCH_HOSTS: https://es01:9200\rELASTICSEARCH_USERNAME: kibana_system\rELASTICSEARCH_PASSWORD: UZuuB5ABGjTBZPez4aDl\rELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: $CERTS_DIR/ca/ca.crt\rSERVER_SSL_ENABLED: \u0026quot;true\u0026quot;\rSERVER_SSL_KEY: $CERTS_DIR/kib01/kib01.key\rSERVER_SSL_CERTIFICATE: $CERTS_DIR/kib01/kib01.crt\rSERVER_SSL_CERTIFICATEAUTHORITIES: $CERTS_DIR/ca/ca.crt\rXPACK_SECURITY_ENCRYPTIONKEY: \u0026quot;fhjskloppd678ehkdfdlliverpoolfcr\u0026quot;\rXPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: \u0026quot;fhjskloppd678ehkdfdlliverpoolfcr\u0026quot;\rXPACK_FLEET_AGENTS_ELASTICSEARCH_HOST: \u0026quot;https://es01:9200\u0026quot;\rXPACK_FLEET_REGISTRYURL: \u0026quot;https://package-registry\u0026quot;\rNODE_EXTRA_CA_CERTS: $CERTS_DIR/ca/ca.crt\rhealthcheck:\rtest: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost/api/status | grep -q 'Looking good' \u0026gt;/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi\rretries: 100\rinterval: 5s\rvolumes:\r- certs:$CERTS_DIR\rnetworks:\r- elastic\rpackage-registry:\rimage: docker.elastic.co/package-registry/distribution:${VERSION}\rcontainer_name: package-registry\rports:\r- 443\renvironment:\r- EPR_ADDRESS=0.0.0.0:443\r- EPR_TLS_KEY=$CERTS_DIR/package-registry/package-registry.key\r- EPR_TLS_CERT=$CERTS_DIR/package-registry/package-registry.crt\rhealthcheck:\rtest: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost/health \u0026gt;/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi\rretries: 100\rinterval: 5s\rvolumes:\r- certs:$CERTS_DIR\rnetworks:\r- elastic\rfleet-server:\rimage: docker.elastic.co/beats/elastic-agent:${VERSION}\rcontainer_name: fleet-server\rports:\r- 8220:8220\rhealthcheck:\rtest: [\u0026quot;CMD-SHELL\u0026quot;, \u0026quot;curl -s -k https://localhost:8220/api/status | grep -q 'HEALTHY'\u0026quot;]\rretries: 300\rinterval: 1s\renvironment:\rFLEET_SERVER_ENABLE: \u0026quot;1\u0026quot;\rELASTICSEARCH_HOST: \u0026quot;https://es01:9200\u0026quot;\rELASTICSEARCH_CA: $CERTS_DIR/ca/ca.crt\rELASTICSEARCH_USERNAME: elastic\rELASTICSEARCH_PASSWORD: CHANGEME\rFLEET_URL: \u0026quot;https://fleet-server:8220\u0026quot;\rFLEET_SERVER_CERT: $CERTS_DIR/fleet-server/fleet-server.crt\rFLEET_SERVER_CERT_KEY: $CERTS_DIR/fleet-server/fleet-server.key\rKIBANA_FLEET_SETUP: \u0026quot;true\u0026quot;\rKIBANA_HOST: \u0026quot;https://kib01:5601\u0026quot;\rKIBANA_USERNAME: elastic\rKIBANA_PASSWORD: CHANGEME\rKIBANA_CA: $CERTS_DIR/ca/ca.crt\rdepends_on:\res01: { condition: service_healthy }\rkib01: { condition: service_healthy }\rvolumes:\r- certs:$CERTS_DIR\rnetworks:\r- elastic\rvolumes:\rdata01:\rdriver: local\rdata02:\rdriver: local\rdata03:\rdriver: local\rcerts:\rdriver: local\rnetworks:\relastic:\rdriver: bridge\r1- Générez et appliquez une licence d\u0026rsquo;essai qui prend en charge Transport Layer Security.\n2- Activez Transport Layer Security pour crypter les communications des clients.\n3- Activez Transport Layer Security pour crypter les communications internodales.\n4- Autorisez l\u0026rsquo;utilisation de certificats auto-signés en ne demandant pas de vérification du nom d\u0026rsquo;hôte.\nGénérez des certificats pour Elasticsearch en faisant apparaître le conteneur create-certs :\ndocker-compose -f create-certs.yml run --rm create_certs\rVérifiez a présence des volumes\ndocker volume ls\rDRIVER VOLUME NAME\rlocal es_certs\rVérifiez la présence des certificats\nsudo ls -R /var/lib/docker/volumes/es_certs/_data/\r/var/lib/docker/volumes/es_certs/_data/:\rbundle.zip ca\tes01 es02 es03 fleet-server\tkib01 package-registry\r/var/lib/docker/volumes/es_certs/_data/ca:\rca.crt\r/var/lib/docker/volumes/es_certs/_data/es01:\res01.crt es01.key\r/var/lib/docker/volumes/es_certs/_data/es02:\res02.crt es02.key\r/var/lib/docker/volumes/es_certs/_data/es03:\res03.crt es03.key\r/var/lib/docker/volumes/es_certs/_data/fleet-server:\rfleet-server.crt fleet-server.key\r/var/lib/docker/volumes/es_certs/_data/kib01:\rkib01.crt kib01.key\r/var/lib/docker/volumes/es_certs/_data/package-registry:\rpackage-registry.crt package-registry.key\rMettez en place le cluster Elasticsearch à trois nœuds :\ndocker-compose -f elastic-docker-tls.yml up -d\rÀ ce stade, Kibana ne peut pas se connecter au cluster Elasticsearch. Vous devez générer un mot de passe pour l\u0026rsquo;utilisateur intégré kibana_system, mettre à jour le mot de passe ELASTICSEARCH_PASSWORD dans le fichier compose, et redémarrer pour permettre à Kibana de communiquer avec le cluster sécurisé.\nExécutez l\u0026rsquo;outil elasticsearch-setup-passwords pour générer des mots de passe pour tous les utilisateurs intégrés, y compris l\u0026rsquo;utilisateur kibana_system. Si vous n\u0026rsquo;utilisez pas PowerShell sous Windows, supprimez les caractères \\de fin de ligne et joignez les lignes avant d\u0026rsquo;exécuter cette commande.\ndocker exec es01 /bin/bash -c \u0026quot;bin/elasticsearch-setup-passwords \\\rauto --batch --url https://es01:9200\u0026quot;\rSi la commande tombe en erreur, veuillez relancer la commande quand le noeud Elasticsearch est pret.\nChanged password for user apm_system\rPASSWORD apm_system = cFupG97Ha1vh8Ntdmi8V\rChanged password for user kibana_system\rPASSWORD kibana_system = im0I9MGIDXHSy5gpUgmm\rChanged password for user kibana\rPASSWORD kibana = im0I9MGIDXHSy5gpUgmm\rChanged password for user logstash_system\rPASSWORD logstash_system = 3ZunAd3WpUcp1tKnb3Rq\rChanged password for user beats_system\rPASSWORD beats_system = yn88diKHJhU5wF7h9Rh9\rChanged password for user remote_monitoring_user\rPASSWORD remote_monitoring_user = wfliiMix1pep0Gnm6Ah8\rChanged password for user elastic\rPASSWORD elastic = fLzlyoIb8RsCT639v7HH\rPrenez note des mots de passe générés. Vous devez configurer le mot de passe de l\u0026rsquo;utilisateur kibana_system dans le fichier compose pour permettre à Kibana de se connecter à Elasticsearch, et vous aurez besoin du mot de passe du superutilisateur elastic pour vous connecter à Kibana et soumettre des requêtes à Elasticsearch.\nDéfinissez ELASTICSEARCH_PASSWORD dans le fichier elastic-docker-tls.yml avec le mot de passe généré pour l\u0026rsquo;utilisateur kibana_system.\n kib01:\rimage: docker.elastic.co/kibana/kibana:${VERSION}\rcontainer_name: kib01\rdepends_on: {\u0026quot;es01\u0026quot;: {\u0026quot;condition\u0026quot;: \u0026quot;service_healthy\u0026quot;}}\rports:\r- 5601:5601\renvironment:\rSERVERNAME: localhost\rELASTICSEARCH_URL: https://es01:9200\rELASTICSEARCH_HOSTS: https://es01:9200\rELASTICSEARCH_USERNAME: kibana_system\rELASTICSEARCH_PASSWORD: CHANGEME\rELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: $CERTS_DIR/ca/ca.crt\rSERVER_SSL_ENABLED: \u0026quot;true\u0026quot;\rSERVER_SSL_KEY: $CERTS_DIR/kib01/kib01.key\rSERVER_SSL_CERTIFICATE: $CERTS_DIR/kib01/kib01.crt\rvolumes:\r- certs:$CERTS_DIR\rnetworks:\r- elastic\rDéfinissez ELASTICSEARCH_PASSWORD et KIBANA_PASSWORD dans le fichier elastic-docker-tls.yml avec le mot de passe généré pour l\u0026rsquo;utilisateur elastic.\nfleet-server:\rimage: docker.elastic.co/beats/elastic-agent:${VERSION}\rcontainer_name: fleet-server\rports:\r- 8220:8220\rhealthcheck:\rtest: [\u0026quot;CMD-SHELL\u0026quot;, \u0026quot;curl -s -k https://localhost:8220/api/status | grep -q 'HEALTHY'\u0026quot;]\rretries: 300\rinterval: 1s\renvironment:\rFLEET_SERVER_ENABLE: \u0026quot;1\u0026quot;\rELASTICSEARCH_HOST: \u0026quot;https://es01:9200\u0026quot;\rELASTICSEARCH_CA: $CERTS_DIR/ca/ca.crt\rELASTICSEARCH_USERNAME: elastic\rELASTICSEARCH_PASSWORD: CHANGEME\rFLEET_URL: \u0026quot;https://fleet-server:8220\u0026quot;\rFLEET_SERVER_CERT: $CERTS_DIR/fleet-server/fleet-server.crt\rFLEET_SERVER_CERT_KEY: $CERTS_DIR/fleet-server/fleet-server.key\rKIBANA_FLEET_SETUP: \u0026quot;true\u0026quot;\rKIBANA_HOST: \u0026quot;https://kib01:5601\u0026quot;\rKIBANA_USERNAME: elastic\rKIBANA_PASSWORD: CHANGEME\rKIBANA_CA: $CERTS_DIR/ca/ca.crt\rUtilisez docker-compose pour redémarrer le cluster et Kibana :\ndocker-compose stop\rdocker-compose -f elastic-docker-tls.yml up -d\rOuvrez Kibana pour charger les données de l\u0026rsquo;échantillon et interagir avec le cluster : https://localhost:5601.\nComme SSL est également activé pour les communications entre Kibana et les navigateurs clients, vous devez accéder à Kibana via le protocole HTTPS.\nVérifiez la connexion entre le serveur Fleet et Kibana :\nManagement -\u0026gt; Fleet\nOuvrez le menu de droit et cliquez sur \u0026ldquo;Stack Monitorng\u0026rdquo;\nCliquez sur l\u0026rsquo;option \u0026ldquo;Or, set up with self monitoring\u0026rdquo;\n"},{"uri":"https://maxime-cls.github.io/elastic-tutorial/elastic/d%C3%A9butant/elastic-agent/","title":"Installation de l&#39;Agent Elastic","tags":[],"description":"","content":"Modifier la configuration par défaut des agents elastic via le serveur fleet sur l\u0026rsquo;interface Kibana :\nManagement -\u0026gt; Fleet\nCliquez sur Fleet settings\nFleet Server Hosts\nhttps://fleet-server:8220\rElasticsearch Output Configuration (YAML)\nssl.certificate_authorities: [\u0026quot;/usr/share/elasticsearch/config/certificates/ca/ca.crt\u0026quot;]\rDéfinissez KIBANA_FLEET_PASSWORD dans le fichier elastic-docker-tls.yml avec le mot de passe généré pour l\u0026rsquo;utilisateur elastic.\n elastic-agent:\rimage: docker.elastic.co/beats/elastic-agent-complete:${VERSION}\rcontainer_name: elastic-agent\rrestart: always\ruser: root # note, synthetic browser monitors require this set to `elastic-agent`\renvironment:\rFLEET_ENROLL: 1\rFLEET_URL: \u0026quot;https://fleet-server:8220\u0026quot;\rFLEET_TOKEN_POLICY_NAME: \u0026quot;Default policy\u0026quot;\rFLEET_CA: $CERTS_DIR/ca/ca.crt\rKIBANA_FLEET_HOST: https://kib01:5601\rKIBANA_FLEET_USERNAME: elastic\rKIBANA_FLEET_PASSWORD: CHANGEME\rKIBANA_FLEET_CA: $CERTS_DIR/ca/ca.crt\rdepends_on:\res01: { condition: service_healthy }\rfleet-server: { condition: service_healthy }\rvolumes:\r- certs:$CERTS_DIR\r- /var/run/docker.sock:/var/run/docker.sock:ro\r- /var/log:/var/log:ro\r- /var/lib/docker/containers:/var/lib/docker/containers:ro\r- /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro\r- /proc:/hostfs/proc:ro\r- /:/hostfs:ro\rnetworks:\r- elastic\rAprès quelques minutes vous devez voir apparaitre l\u0026rsquo;agent elastic sur l\u0026rsquo;interface Kibana.\nIntégration du module Docker Cliquez sur Agent policies on niveau de l\u0026rsquo;interface Kibana (Fleet).\nCliquez sur Default Policy.\nCliquez sur Add Integration.\nRecherchez dans la barre docker.\nAjoutez le module Docker.\nSauvegarder votre choix.\nVous devez obtenir ce résultat dans l\u0026rsquo;interface Kibana.\n"},{"uri":"https://maxime-cls.github.io/elastic-tutorial/elastic/d%C3%A9butant/","title":"Débutant","tags":[],"description":"","content":""},{"uri":"https://maxime-cls.github.io/elastic-tutorial/elastic/prerequis/","title":"Débutant","tags":[],"description":"","content":""},{"uri":"https://maxime-cls.github.io/elastic-tutorial/elastic/%C3%A9l%C3%A9mentaire/","title":"Elementaire","tags":[],"description":"","content":""},{"uri":"https://maxime-cls.github.io/elastic-tutorial/elastic/intermediare/","title":"Intermediare","tags":[],"description":"","content":""},{"uri":"https://maxime-cls.github.io/elastic-tutorial/elastic/avance/","title":"Avancé","tags":[],"description":"","content":""},{"uri":"https://maxime-cls.github.io/elastic-tutorial/","title":"Elastic Tutoriel","tags":[],"description":"","content":""},{"uri":"https://maxime-cls.github.io/elastic-tutorial/elastic/","title":"Elastic","tags":[],"description":"","content":""},{"uri":"https://maxime-cls.github.io/elastic-tutorial/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://maxime-cls.github.io/elastic-tutorial/tags/","title":"Tags","tags":[],"description":"","content":""}]